// stack docker build and set up
properties([
    parameters([
        gitParameter(branch: '',
                     branchFilter: 'origin/(.*)',
                     defaultValue: 'master',
                     description: '',
                     name: 'BRANCH',
                     quickFilterEnabled: false,
                     selectedValue: 'NONE',
                     sortMode: 'NONE',
                     tagFilter: '*',
                     type: 'PT_BRANCH')
    ])
])

GIT_REMOTE="git@git.keyayun.com:keyayun/service.git"
CODE_PATH="/home/couchbase/keyayun.com"
SHELL_PATH="/home"
SERVICE_NAME="service"

def pullCode() {
    ws("${CODE_PATH}/${SERVICE_NAME}"){
        git branch: "${params.BRANCH}", url: "${GIT_REMOTE}"
    }
    addShortText background: 'white', border: 1, color: 'green', text: "${params.BRANCH}"
}

def buildService() {
    withDockerContainer(args: '-v /home/pkg:/go/pkg', image: 'golang') {
        sh "git config --global url.\"git@git.keyayun.com:\".insteadOf \"https://git.keyayun.com\" && cd ${CODE_PATH}/${SERVICE_NAME} && go mod tidy && make && make linux && ./bin/cbdeploy --gen-sample && cp -r db-config.yaml ${SHELL_PATH}/${SERVICE_NAME} && cp -r  bin ${SHELL_PATH}/${SERVICE_NAME} && cp -r assets ${SHELL_PATH}/${SERVICE_NAME} && cp -r deps/cozy/cozy-stack/scripts ${SHELL_PATH}/${SERVICE_NAME}"
    }
}

def writeDockerfile() {
    sh label: '', script: '''cat > Dockerfile << EOF
FROM node:8.16.0-stretch
COPY bin/service-stack-linux-amd64 /usr/bin/service-stack-linux-amd64
COPY bin/cbmultideploy /usr/bin/cbmultideploy
COPY start.sh /start.sh
COPY multi-db-config.yaml /usr/etc/seal/multi-db-config.yaml
COPY conf.yml /usr/etc/seal/conf.yml
COPY deploy.sh /go/deploy.sh
COPY update_app.sh /go/update_app.sh
COPY install_app.sh /go/install_app.sh
COPY assets /go/assets
COPY scripts /go/scripts
RUN chmod 755 /start.sh
CMD ["/start.sh"]
EOF
    '''
    sh "mv Dockerfile ${SHELL_PATH}/${SERVICE_NAME}"
}

def buildStackDocker() {
    echo 'build docker and push docker'
    sh label: '', script: '''cat > build.sh << EOF
#!/bin/bash
set -e
date=`TZ=UTC-8 date +%Y%m%d%H%M`
harbor_path="seal"
name="service"
shell_path="/home"
docker login https://harbor.bj.keyayun.com -u jks_registry -p CuraCloud30503
docker build -t harbor.bj.keyayun.com/\\${harbor_path}/\\${name}-k8s:\\${date} \\${shell_path}/\\${name}
docker tag harbor.bj.keyayun.com/\\${harbor_path}/\\${name}-k8s:\\${date} harbor.bj.keyayun.com/\\${harbor_path}/\\${name}-k8s:latest
docker push harbor.bj.keyayun.com/\\${harbor_path}/\\${name}-k8s:\\${date}
docker push harbor.bj.keyayun.com/\\${harbor_path}/\\${name}-k8s:latest
docker image rm harbor.bj.keyayun.com/\\${harbor_path}/\\${name}-k8s:\\${date}
docker image rm harbor.bj.keyayun.com/\\${harbor_path}/\\${name}-k8s:latest
docker logout
EOF
    '''
    sh 'chmod +x build.sh'
    sh 'bash build.sh'
}


def writePrepareShellAndSendMaster() {
    echo 'writePrepareShellAndSendMaster'
    sh label: '', script: '''cat > prepare.sh << EOF
#!/bin/bash
cd k8s/ich-test/couchbase
kubectl delete -f ../stack/deployment.yaml
kubectl apply -f ../stack/deployment.yaml
kubectl delete -f ../stack-runner/config.yaml
kubectl apply -f ../stack-runner/config.yaml
kubectl delete -f ../stack-runner/services-test-redis.yaml
kubectl apply -f ../stack-runner/services-test-redis.yaml
kubectl delete -f ../stack-runner/services-test-cpu.yaml
kubectl apply -f ../stack-runner/services-test-cpu.yaml
kubectl delete -f ../stack-runner/services-test-gpu.yaml
kubectl apply -f ../stack-runner/services-test-gpu.yaml
kubectl delete -f ../stack-runner/services-test-pacs.yaml
kubectl apply -f ../stack-runner/services-test-pacs.yaml
EOF
    '''
    sshPublisher(publishers: [sshPublisherDesc(configName: '192.168.201.12', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'chmod +x prepare.sh && bash prepare.sh && rm -rf prepare.sh', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'prepare.sh')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)]) 
}

def installInstanceAndServices() {
    echo 'installInstanceAndServices'
    sh label: '', script: '''cat > install.sh << EOF
#!/bin/bash
docker rm -f couchbase-db
docker rm -f minio
docker volume ls | awk '{print \\$2}' | xargs  docker volume rm
docker run -d --name couchbase-db -p 8091-8094:8091-8094 -p 11210:11210 couchbase
sleep 10
/home/curacloud/stack/cbdeploy --config /home/curacloud/stack/db-config.yaml --cb-cli /usr/bin/docker exec couchbase-db /opt/couchbase/bin/couchbase-cli
docker run --restart=always -p 9000:9000 --name minio  -e "MINIO_ACCESS_KEY=admin" -e "MINIO_SECRET_KEY=curacloud" -d  minio/minio:RELEASE.2019-10-12T01-39-57Z server /data
sleep 60
dockerID=""
while true
do
    dockerID=\\$(docker ps | grep harbor.bj.keyayun.com/seal/service-k8s | awk '{print \\$1}' | head -n 1)
    docker exec -t \\$dockerID bash -c "/usr/bin/service-stack-linux-amd64 -c /usr/etc/seal/conf.yml status";result=\\$?
    echo "port status \\$result"
    if [[ \\$result == 0 ]] ; then
        break
    fi
    sleep 1
done

control="register"
for instance in cb.ip-192-168-201-12.bj.keyayun.com:32090
do
  ## delete instance
  ##docker exec -t \\$dockerID bash -c "/usr/bin/service-stack-linux-amd64 -c /usr/etc/seal/conf.yml instances rm --force \\$instance"
  ## create instance
  docker exec -t \\$dockerID bash -c "bash /go/deploy.sh \\$instance jenkins@keyayun.com"
  ### services
  for service in dicomparse doc2pdf niftislice 
  do
     docker exec -t \\$dockerID bash -c "/usr/bin/service-stack-linux-amd64 -c /usr/etc/seal/conf.yml services \\$control --domain \\$instance \\$service http://runner-service.services-test:8666/\\$service"
  done
  for service in deepvessel dvpreprocess
  do
     docker exec -t \\$dockerID bash -c "/usr/bin/service-stack-linux-amd64 -c /usr/etc/seal/conf.yml services \\$control --domain \\$instance \\$service http://gpu-runner-service.services-test:8666/\\$service"
  done  
  for service in ich
  do
     docker exec -t \\$dockerID bash -c "/usr/bin/service-stack-linux-amd64 -c /usr/etc/seal/conf.yml services \\$control --domain \\$instance \\$service http://gpu-runner-service.services-test:8666/ai\\$service"
  done
  for service in pacs
  do
     docker exec -t \\$dockerID bash -c "/usr/bin/service-stack-linux-amd64 -c /usr/etc/seal/conf.yml services \\$control --domain \\$instance \\$service http://pacs-service.services-test:8228"
  done

  for app in drive ich tags analysis
  do
    sleep 10
    docker exec -t \\$dockerID bash -c "/usr/bin/service-stack-linux-amd64 -c /usr/etc/seal/conf.yml apps install \\$app --domain \\$instance registry://\\${app}"
  done
  for app in deepvesselapp
  do
    docker exec -t \\$dockerID bash -c "/usr/bin/service-stack-linux-amd64 -c /usr/etc/seal/conf.yml apps install \\$app --domain \\$instance registry://deepvessel"
  done
done

EOF
    '''
    sshPublisher(publishers: [sshPublisherDesc(configName: '192.168.201.19', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'chmod +x install.sh && bash install.sh', execTimeout: 1200000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'install.sh')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
}



node {
    stage("PrePare Stack Docker") {
        try {
            pullCode()
            buildService()
            writeDockerfile()
            buildStackDocker()            
        } catch(e) {
            emailext body: "冒烟测试 stack编译docker失败!! ${e}", subject: '冒烟测试', to: 'jung@keyayun.com'
        }
    }
    stage("k8s test prepare") {
        try {
          writePrepareShellAndSendMaster()   
        } catch(e) {
            emailext body: "冒烟测试 部署失败!! ${e}", subject: '冒烟测试', to: 'jung@keyayun.com'
        }
    }

    stage("install Instance and Services") {
        try {
            installInstanceAndServices()
        } catch(e) {
             emailext body: "冒烟测试 服务安装失败!! ${e}", subject: '冒烟测试', to: 'jung@keyayun.com,bohaoc@keyayun.com'
        }
    }

    stage("run test") {
        sh "rm -rf ${CODE_PATH}/services-test"
        ws("${CODE_PATH}/services-test"){
            git branch: "master", url: "git@git.keyayun.com:jung/services-test.git"
        }
        try { 
            withDockerContainer(args: '-v /home/pkg:/go/pkg -v /home/curacloud/testcase:/testcase', image: 'golang') {
                sh "git config --global url.\"git@git.keyayun.com:\".insteadOf \"https://git.keyayun.com\" && cd ${CODE_PATH}/services-test && go mod init keyayun.com/services-test && go mod tidy && go build"
                sh "${CODE_PATH}/services-test/services-test c --domain cb.ip-192-168-201-12.bj.keyayun.com:32090 --scheme http"
                sh "${CODE_PATH}/services-test/services-test upload /testcase/0028-1 /"
                sh "${CODE_PATH}/services-test/services-test createICH --domain cb-analysis.ip-192-168-201-12.bj.keyayun.com:32090 --scheme http"
                sh "${CODE_PATH}/services-test/services-test upload /testcase/dv-testcase / deepvesselapp"
                sh "${CODE_PATH}/services-test/services-test createDv --domain cb-deepvesselapp.ip-192-168-201-12.bj.keyayun.com:32090 --scheme http"
            }
        } catch(e) {
            emailext body: "冒烟测试 case测试没有通过${e}", subject: '冒烟测试', to: 'jung@keyayun.com,bohaoc@keyayun.com'
            currentBuild.result = 'FAIL'
            result = "FAIL"
        }
    }
    stage("run upload test") {
        sh "rm -rf ${CODE_PATH}/services-test"
        ws("${CODE_PATH}/services-test"){
            git branch: "master", url: "git@git.keyayun.com:jung/services-test.git"
        }
        try {
            withDockerContainer(args: '-v /home/pkg:/go/pkg -v /home/curacloud/upload-test-case:/testcase', image: 'golang') {
                sh "git config --global url.\"git@git.keyayun.com:\".insteadOf \"https://git.keyayun.com\" && cd ${CODE_PATH}/services-test && go mod init keyayun.com/services-test && go mod tidy && go build"
                sh "${CODE_PATH}/services-test/services-test c --domain cb.ip-192-168-201-12.bj.keyayun.com:32090 --scheme http"
                // sh "${CODE_PATH}/services-test/services-test upload /testcase /testcase"
                result1=sh returnStdout: true, script: "${CODE_PATH}/services-test/services-test upload /testcase/smallfiles /smallfiles"
                result2=sh returnStdout: true, script: "${CODE_PATH}/services-test/services-test upload /testcase/bigfiles /bigfiles"
                emailext body: "性能测试 上传测试结果，小:${result1} \n 大:${result2}", subject: '性能测试', to: 'jung@keyayun.com'
            }
        } catch(e) {
            emailext body: "性能测试 上传测试没有通过${e}", subject: '性能测试', to: 'jung@keyayun.com'
            currentBuild.result = 'FAIL'
            result = "FAIL"
        }
    }
}